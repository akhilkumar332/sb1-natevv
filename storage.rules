rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidImageSize() {
      return request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }

    function isValidDocumentSize() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    function isValidImage() {
      return request.resource.contentType.matches('image/.*');
    }

    function isValidDocument() {
      return request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('image/.*');
    }

    // Profile pictures
    match /profiles/{userId}/{fileName} {
      allow read: if true; // Public read for profile pictures
      allow write: if isAuthenticated() &&
                     isOwner(userId) &&
                     isValidImage() &&
                     isValidImageSize();
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Hospital logos and images
    match /hospitals/{hospitalId}/{fileName} {
      allow read: if true; // Public read
      allow write: if isAuthenticated() &&
                     isValidImage() &&
                     isValidImageSize();
      allow delete: if isAuthenticated();
    }

    // Campaign images
    match /campaigns/{campaignId}/{fileName} {
      allow read: if true; // Public read
      allow write: if isAuthenticated() &&
                     isValidImage() &&
                     isValidImageSize();
      allow delete: if isAuthenticated();
    }

    // Verification documents (hospitals, NGOs)
    match /verification/{userId}/{fileName} {
      allow read: if isAuthenticated() &&
                    (isOwner(userId) ||
                     firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow write: if isAuthenticated() &&
                     isOwner(userId) &&
                     isValidDocument() &&
                     isValidDocumentSize();
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Donation certificates
    match /certificates/{donorId}/{fileName} {
      allow read: if isAuthenticated() &&
                    (isOwner(donorId) ||
                     firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow write: if isAuthenticated() &&
                     firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if false; // Certificates should not be deleted
    }

    // NGO documents
    match /ngos/{ngoId}/{fileName} {
      allow read: if true; // Public read
      allow write: if isAuthenticated() &&
                     isValidImage() &&
                     isValidImageSize();
      allow delete: if isAuthenticated();
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
